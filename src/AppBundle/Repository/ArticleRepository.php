<?php

namespace AppBundle\Repository;
use Doctrine\ORM\Tools\Pagination\Paginator;
/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{
	/**
     * Get the paginated list of published articles
     *
     * @param int $page
     * @param int $maxperpage
     * @param string $sortby
     * @return Paginator
     */
    public function getListByCat($page=1, $maxperpage=10, $cat)
    {
        if($cat->getId() == $cat->getParent()->getId()){
            $q = $this->_em->createQueryBuilder('a');
                $q->select('a')
                ->from('AppBundle:Article','a')
                ->join('a.category' , 'c')
                ->where('c.parent = :cat')
                ->setParameter('cat', $cat->getId())
            ;
        }
        else{
            $q = $this->_em->createQueryBuilder('a');
                $q->select('a')
                ->from('AppBundle:Article','a')
                ->where('a.category = :cat')
                ->setParameter('cat', $cat->getId())
            ;
        }

        $q->setFirstResult(($page-1) * $maxperpage)
            ->setMaxResults($maxperpage)
            // ->orderBy('a.designation', 'ASC')
            ;

        return new Paginator($q);
    }

    /**
     * Get the paginated list of published articles
     *
     * @param int $page
     * @param int $maxperpage
     * @param string $sortby
     * @return Paginator
     */
    public function getList($page=1, $maxperpage=10)
    {
        $q = $this->_em->createQueryBuilder('a');
            $q->select('a')
            ->from('AppBundle:Article','a')
        ;

        $q->setFirstResult(($page-1) * $maxperpage)
            ->setMaxResults($maxperpage)
            // ->orderBy('a.designation', 'ASC')
            ;

        return new Paginator($q);
    }

    public function countArticlesTotal(){
    	$q = $this->_em->createQueryBuilder()
            ->select('article')
            ->from('AppBundle:Article','article')
        ;
        return count($q->getQuery()->getResult());
    }

    public function getPrice($client, $article){
        $query = $this->_em->createQueryBuilder();
        return 
        $price = $query
            ->select('p')
            ->from('AppBundle:Prix', 'p')
            ->join('p.client', 'c')
            ->join('p.article', 'a') 
            ->andwhere(":today BETWEEN p.dateDebut AND p.dateFin ")
            ->andwhere("p.client = :clientId ")
            ->andwhere("p.article = :articleId ")
            ->setParameter('today', new \DateTime())
            ->setParameter('clientId', $client->getId())
            ->setParameter('articleId', $article->getId())
            ->orderBy('a.designation', 'ASC')
            ->getQuery()
            ->getOneOrNullResult()
        ;
    }

    public function searchArticle($requete){
        $requete = 'SELECT a FROM AppBundle\Entity\Article a '. $requete;
        $entityManager = $this->getEntityManager();

        $query = $entityManager->createQuery(
            $requete
        );

        //returns an array of Product objects
        return $query->execute();
    
    }

}
